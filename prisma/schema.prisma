// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  passwordHash String
  accounts      Account[]
  budgets       Budget[]
  settings      Settings?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // userSettingsId String?   @db.ObjectId
}

model Settings {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  currency String

  userId String @db.ObjectId @unique
  user User @relation(fields: [userId],references: [id],onDelete:Cascade)
}

model Budget {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  currency String
  transactions Transaction[]
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Category{
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  icon String
  type String

  transactions Transaction[]

  // budgetId String @db.ObjectId
  // bgdget Budget @relation(fields: [budgetId],references: [id])
}

model Transaction{
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  amount Float
  description String
  type String
  date DateTime

  budgetId String @db.ObjectId
  budget Budget @relation(fields: [budgetId],references: [id],onDelete:Cascade)

  categoryId String @db.ObjectId
  category Category @relation(fields: [categoryId],references: [id],onDelete:Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MonthHistory {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  budgetId  String
  day     Int
  month   Int
  year    Int
  income  Float
  expense Float

  @@unique([day,month,year,budgetId])
  
}

model YearHistory {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  budgetId  String
  month   Int
  year    Int
  income  Float
  expense Float

  @@unique([month,year,budgetId])
  
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
